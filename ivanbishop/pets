---
openapi: 3.0.2
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.6
  description: |-
    This is a CHECKIN FOR GITHUB  sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    name: test body
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: /api/v3
paths:
  /pet:
    put:
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      tags:
      - pet
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: updatePet
      summary: Update an existing pet
      description: Update an existing pet by Id
    post:
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      tags:
      - pet
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: addPet
      summary: Add a new pet to the store
      description: Add a new pet to the store
  /pet/findByStatus:
    get:
      tags:
      - pet
      parameters:
      - explode: true
        name: status
        description: Status values that need to be considered for filter
        schema:
          default: available
          enum:
          - available
          - pending
          - sold
          type: string
        in: query
        required: false
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: findPetsByStatus
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
  /pet/findByTags:
    get:
      tags:
      - pet
      parameters:
      - explode: true
        name: tags
        description: Tags to filter by
        schema:
          type: array
          items:
            type: string
        in: query
        required: false
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: findPetsByTags
      summary: Finds Pets by tags
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
  /pet/{petId}:
    get:
      tags:
      - pet
      parameters:
      - name: petId
        description: ID of pet to return
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: getPetById
      summary: Find pet by ID
      description: Returns a single pet
    post:
      tags:
      - pet
      parameters:
      - name: petId
        description: ID of pet that needs to be updated
        schema:
          format: int64
          type: integer
        in: path
        required: true
      - name: name
        description: Name of pet that needs to be updated
        schema:
          type: string
        in: query
      - name: status
        description: Status of pet that needs to be updated
        schema:
          type: string
        in: query
      responses:
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: updatePetWithForm
      summary: Updates a pet in the store with form data
      description: ""
    delete:
      tags:
      - pet
      parameters:
      - name: api_key
        description: ""
        schema:
          type: string
        in: header
        required: false
      - name: petId
        description: Pet id to delete
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        "400":
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: deletePet
      summary: Deletes a pet
      description: ""
  /pet/{petId}/uploadImage:
    post:
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      tags:
      - pet
      parameters:
      - name: petId
        description: ID of pet to update
        schema:
          format: int64
          type: integer
        in: path
        required: true
      - name: additionalMetadata
        description: Additional Metadata
        schema:
          type: string
        in: query
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      operationId: uploadFile
      summary: uploads an image
      description: ""
  /store/inventory:
    get:
      tags:
      - store
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  format: int32
                  type: integer
          description: successful operation
      security:
      - api_key: []
      operationId: getInventory
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
  /store/order:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      tags:
      - store
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "405":
          description: Invalid input
      operationId: placeOrder
      summary: Place an order for a pet
      description: Place a new order in the store
  /store/order/{orderId}:
    get:
      tags:
      - store
      parameters:
      - name: orderId
        description: ID of order that needs to be fetched
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      operationId: getOrderById
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generated exceptions
    delete:
      tags:
      - store
      parameters:
      - name: orderId
        description: ID of the order that needs to be deleted
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      operationId: deleteOrder
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
  /user:
    post:
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      tags:
      - user
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      operationId: createUser
      summary: Create user
      description: This can only be done by the logged in user.
  /user/createWithList:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      tags:
      - user
      responses:
        default:
          description: successful operation
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
      operationId: createUsersWithListInput
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
  /user/login:
    get:
      tags:
      - user
      parameters:
      - name: username
        description: The user name for login
        schema:
          type: string
        in: query
        required: false
      - name: password
        description: The password for login in clear text
        schema:
          type: string
        in: query
        required: false
      responses:
        "200":
          headers:
            X-Rate-Limit:
              schema:
                format: int32
                type: integer
              description: calls per hour allowed by the user
            X-Expires-After:
              schema:
                format: date-time
                type: string
              description: date in UTC when token expires
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
        "400":
          description: Invalid username/password supplied
      operationId: loginUser
      summary: Logs user into the system
      description: ""
  /user/logout:
    get:
      tags:
      - user
      responses:
        default:
          description: successful operation
      operationId: logoutUser
      summary: Logs out current logged in user session
      description: ""
  /user/{username}:
    get:
      tags:
      - user
      parameters:
      - name: username
        description: 'The name that needs to be fetched. Use user1 for testing. '
        schema:
          type: string
        in: path
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      operationId: getUserByName
      summary: Get user by user name
      description: ""
    put:
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      tags:
      - user
      parameters:
      - name: username
        description: name that need to be deleted
        schema:
          type: string
        in: path
        required: true
      responses:
        default:
          description: successful operation
      operationId: updateUser
      summary: Update user
      description: This can only be done by the logged in user.
    delete:
      tags:
      - user
      parameters:
      - name: username
        description: The name that needs to be deleted
        schema:
          type: string
        in: path
        required: true
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      operationId: deleteUser
      summary: Delete user
      description: This can only be done by the logged in user.
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 10
        petId:
          format: int64
          type: integer
          example: 198772
        quantity:
          format: int32
          type: integer
          example: 7
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          type: string
          example: approved
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            name: addresses
            wrapped: true
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          format: int32
          description: User Status
          type: integer
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
            xml:
              name: photoUrl
          xml:
            wrapped: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
          type: string
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      type: apiKey
      description: apikey response
      name: api_key
      in: header
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Operations about user
- name: user
  description: Access to Petstore orders
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
